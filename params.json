{"name":"CS-942","tagline":"Algorithms","body":"# CS-942\r\n\r\n#  Implementation of some algorithms for CS 942\r\n\r\n## 1. GCD Algorithm in assembly (x86)\r\nWe implemented Euclid’s greatest common divisor algorithm in assembly language (x86). The function takes two arguments, x and y. While y does not equal zero, we get the modulus of x and y, and assign the result to a variable remainder.  Then, we assign the value of y to x, and assign y the value of the remainder variable. These steps will loop until y reaches zero. The last none zero value will be returned as the greatest common divisor. \r\n\r\nIn assembly, this is achieved by first moving our two values into the 16-bit registers AX and BX. These general registers are used due to assembly’s handling of division. After placing the values in the registers, a call is made to the procedure that will calculate the GCD. In the procedure, a code block is defined as loop. The first step is dividing the two values that were stored in the AX and BX registers.  In assembly, the results of the division are stored in AX as the quotient and DX as the remainder. Next, it compares the value in DX to zero. If the value is not zero, it assigns the value of BX to AX and assign BX to DX. A value of zero is added to DX to clear the register in preparation for division in the next loop iteration. The last statement jumps back to the beginning of the code block. \r\n\r\nWhen a remainder of 0 is reached, a jump is made into another code block that moves the value of BX into the 32-bit register EAX in order to print the GCD value to the console.  The procedures in this code block assist in the formatting of the text to print in the console.  The procedure then returns control to main and exits.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}